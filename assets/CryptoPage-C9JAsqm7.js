import{a as p,e as m,o as v,f as e,v as d,z as w,j as C,t as b,y as k}from"./vendor-DpYf_-LF.js";const D=async()=>await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),A=async l=>{const o=await crypto.subtle.exportKey("raw",l);return btoa(String.fromCharCode(...new Uint8Array(o)))},f=async l=>{const o=atob(l),n=new Uint8Array(o.length);for(let s=0;s<o.length;s++)n[s]=o.charCodeAt(s);return await crypto.subtle.importKey("raw",n,{name:"AES-GCM"},!0,["encrypt","decrypt"])},U=async(l,o)=>{const n=crypto.getRandomValues(new Uint8Array(12)),s=new TextEncoder().encode(JSON.stringify(o)),c=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},l,s),r=new Uint8Array(n.length+c.byteLength);return r.set(n,0),r.set(new Uint8Array(c),n.length),btoa(String.fromCharCode(...r))},_=async(l,o)=>{const n=atob(o),s=new Uint8Array(n.length);for(let i=0;i<n.length;i++)s[i]=n.charCodeAt(i);const c=s.slice(0,12),r=s.slice(12),u=await crypto.subtle.decrypt({name:"AES-GCM",iv:c},l,r);return JSON.parse(new TextDecoder().decode(u))},K={class:"p-5"},E={class:"border"},h={class:"p-5"},B={class:"p-5"},V={class:"p-5"},M={class:"p-5"},T={class:"p-5"},G={class:"m-5"},N={class:"m-5"},I={class:"m-5"},O={__name:"CryptoPage",setup(l){const o=p("Alice"),n=p("alice@example.com"),s=p("sensitive-auth-token"),c=p(null),r=p(null),u=p(null),i=async()=>{try{const a=await D();c.value=await A(a);const t={name:o.value,email:n.value,token:s.value};r.value=await U(a,t),localStorage.setItem("encryptedUserData",r.value)}catch(a){console.error("加密失败:",a)}},x=async()=>{try{const a=localStorage.getItem("encryptedUserData");if(a){const t=await f(c.value);u.value=await _(t,a)}}catch(a){console.error("解密失败:",a)}};return(a,t)=>{const g=k("track"),S=k("permission");return v(),m("div",K,[t[10]||(t[10]=e("h1",null,"前端对用户信息加密与解密",-1)),e("div",E,[e("p",h,[t[3]||(t[3]=e("span",{class:"inline w-100"},"username",-1)),d(e("input",{type:"text","onUpdate:modelValue":t[0]||(t[0]=y=>o.value=y),class:"border p-5 m-5"},null,512),[[w,o.value]])]),e("p",B,[t[4]||(t[4]=e("span",{class:"inline w-100"},"email",-1)),d(e("input",{type:"text","onUpdate:modelValue":t[1]||(t[1]=y=>n.value=y),class:"border p-5 m-5"},null,512),[[w,n.value]])]),e("p",V,[t[5]||(t[5]=e("span",{class:"inline w-100"},"token",-1)),d(e("input",{type:"text","onUpdate:modelValue":t[2]||(t[2]=y=>s.value=y),class:"border p-5 m-5"},null,512),[[w,s.value]])]),t[8]||(t[8]=e("p",{class:"p-5"}," 完整流程说明: 1. 生成密钥 → 2. 导出密钥为字符串 → 3. 存储密钥到安全位置 → 4. 加密用户数据 → 5. 解密时恢复密钥 ",-1)),t[9]||(t[9]=e("p",null,"加密/解密时：必须使用 CryptoKey 对象; 存储时：才转换为字符串（Base64/JWK 格式）",-1)),e("p",M,[d((v(),m("button",{class:"btn",onClick:i},t[6]||(t[6]=[C("加密")]))),[[g,"setcryptoBtn",void 0,{click:!0}],[S,"admin"]]),d((v(),m("button",{class:"btn",onClick:x},t[7]||(t[7]=[C("解密")]))),[[g,"getcryptoBtn",void 0,{click:!0}],[S,"admin"]])]),e("div",T,[e("p",G,"Base64 格式的密钥字符串: "+b(c.value),1),e("p",N,"加密结果: "+b(r.value),1),e("p",I,"解密结果: "+b(u.value),1)])])])}}};export{O as default};
